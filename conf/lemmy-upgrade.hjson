{
  # settings related to the postgresql database
  database: {
    # Configure the database by specifying a URI
    # 
    # This is the preferred method to specify database connection details since
    # it is the most flexible.
    # Connection URI pointing to a postgres instance
    # 
    # This example uses peer authentication to obviate the need for creating,
    # configuring, and managing passwords.
    # 
    # For an explanation of how to use connection URIs, see [here][0] in
    # PostgreSQL's documentation.
    # 
    # [0]: https://www.postgresql.org/docs/current/libpq-connect.html#id-1.7.3.8.3.6
    #uri: "postgresql:///lemmy?user=lemmy&host=/var/run/postgresql"

    # or

    # Configure the database by specifying parts of a URI
    # 
    # Note that specifying the `uri` field should be preferred since it provides
    # greater control over how the connection is made. This merely exists for
    # backwards-compatibility.
    # Username to connect to postgres
    user: "__DB_USER__"
    # Password to connect to postgres
    password: "__DB_PWD__"
    # Host where postgres is running
    host: "localhost"
    # Port where postgres can be accessed
    port: 5432
    # Name of the postgres database for lemmy
    database: "__DB_NAME__"
    # Maximum number of active sql connections
    pool_size: 30
  }
  # rate limits for various user actions, by user ip
  rate_limit: {
    # Maximum number of messages created in interval
    message: 180
    # Interval length for message limit, in seconds
    message_per_second: 60
    # Maximum number of posts created in interval
    post: 6
    # Interval length for post limit, in seconds
    post_per_second: 600
    # Maximum number of registrations in interval
    register: 3
    # Interval length for registration limit, in seconds
    register_per_second: 3600
    # Maximum number of image uploads in interval
    image: 6
    # Interval length for image uploads, in seconds
    image_per_second: 3600
    # Maximum number of comments created in interval
    comment: 6
    # Interval length for comment limit, in seconds
    comment_per_second: 600
    search: 60
    # Interval length for search limit, in seconds
    search_per_second: 600
  }
  captcha: {
    # Whether captcha is required for signup
    enabled: false
    # Can be easy, medium, or hard
    difficulty: "medium"
  }
  # Settings related to activitypub federation
  # Pictrs image server configuration.
  pictrs: {
    # Address where pictrs is available (for image hosting)
    url: "http://127.0.0.1:__PORT_PICTRS__/"
    # Set a custom pictrs API key. ( Required for deleting images )
    #api_key: "string"
    # Backwards compatibility with 0.18.1. False is equivalent to `image_mode: None`, true is
    # equivalent to `image_mode: StoreLinkPreviews`.
    # 
    # To be removed in 0.20
    cache_external_link_previews: true
    # Specifies how to handle remote images, so that users don't have to connect directly to remote
    # servers.
    image_mode: 
      # Leave images unchanged, don't generate any local thumbnails for post urls. Instead the
      # Opengraph image is directly returned as thumbnail
      #"None"

      # or

      # Generate thumbnails for external post urls and store them persistently in pict-rs. This
      # ensures that they can be reliably retrieved and can be resized using pict-rs APIs. However
      # it also increases storage usage.
      # 
      # This is the default behaviour, and also matches Lemmy 0.18.
      #"StoreLinkPreviews"

      # or

      # If enabled, all images from remote domains are rewritten to pass through
      # `/api/v3/image_proxy`, including embedded images in markdown. Images are stored temporarily
      # in pict-rs for caching. This improves privacy as users don't expose their IP to untrusted
      # servers, and decreases load on other servers. However it increases bandwidth use for the
      # local server.
      # 
      # Requires pict-rs 0.5
      "ProxyAllImages"
    # Allows bypassing proxy for specific image hosts when using ProxyAllImages.
    # 
    # imgur.com is bypassed by default to avoid rate limit errors. When specifying any bypass
    # in the config, this default is ignored and you need to list imgur explicitly. To proxy imgur
    # requests, specify a noop bypass list, eg `proxy_bypass_domains ["example.org"]`.
    proxy_bypass_domains: [
      "i.imgur.com"
      /* ... */
    ]
    # Timeout for uploading images to pictrs (in seconds)
    upload_timeout: 30
    # Resize post thumbnails to this maximum width/height.
    max_thumbnail_size: 512
  }
  # Email sending configuration. All options except login/password are mandatory
  email: {
    # Hostname and port of the smtp server
    smtp_server: "__MAIN_DOMAIN__:587"
    # Login name for smtp server
    smtp_login: "__APP__"
    # Password to login to the smtp server
    smtp_password: "__MAIL_PWD__"
    # Address to send emails from, eg "noreply@your-instance.com"
    smtp_from_address: "__APP__@__DOMAIN__"
    # Whether or not smtp connections should use tls. Can be none, tls, or starttls
    tls_type: "starttls"
  }
  # the domain name of your instance (mandatory)
  hostname: "__DOMAIN__"
  # Address where lemmy should listen for incoming requests
  bind: "0.0.0.0"
  # Port where lemmy should listen for incoming requests
  port: __PORT__
  # Whether the site is available over TLS. Needs to be true for federation to work.
  tls_enabled: true
  federation: {
    # Limit to the number of concurrent outgoing federation requests per target instance.
    # Set this to a higher value than 1 (e.g. 6) only if you have a huge instance (>10 activities
    # per second) and if a receiving instance is not keeping up.
    concurrent_sends_per_instance: 1
  }
  # Sets a response Access-Control-Allow-Origin CORS header
  # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
  #cors_origin: "lemmy.tld"
}
